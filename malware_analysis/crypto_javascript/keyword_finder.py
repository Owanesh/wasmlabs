#!/usr/bin/env python3
import os
import sys
import argparse
from collections import defaultdict

# ANSI Color Codes
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    RESET = '\033[0m'

def colored(text, color):
    return f"{color}{text}{Colors.RESET}"



def main():
    # Argument parsing
    parser = argparse.ArgumentParser(description="Search for keywords in files (excluding .json) and generate a folder-based report.")
    parser.add_argument('--find', required=True, help="Keywords to search (comma-separated)")
    parser.add_argument('--base', default='../VTAcademicSamples/', 
                       help="Base search path")
    
    args = parser.parse_args()
    keywords = [k.strip().lower() for k in args.find.split(',') if k.strip()]
    
    # Initialize data structures
    report = {}
    total_counts = defaultdict(int)
    errors = []
    
    # Process files
    for root, _, files in os.walk(args.base):
        folder_data = {'files': [], 'counts': defaultdict(int), 'total_files': 0}
        
        for filename in files:
            if filename.endswith('.json'):
                continue
                
            folder_data['total_files'] += 1
            
            try:
                file_path = os.path.join(root, filename)
                with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                    content = f.read().lower()
                
                file_counts = {k: content.count(k) for k in keywords}
                
                if any(file_counts.values()):
                    folder_data['files'].append((filename, file_counts))
                    for k, count in file_counts.items():
                        folder_data['counts'][k] += count
                        total_counts[k] += count
                        
            except Exception as e:
                errors.append((file_path, str(e)))
        
        # Store folder data if any matches found
        if folder_data['files']:
            rel_path = os.path.relpath(root, args.base)
            report[rel_path] = folder_data
    
    print("Analysis completed.\n")
    
    # Display results
    total_matched_files = sum(len(info['files']) for info in report.values())
    
    print("SUMMARY")
    print(f"Total files with matches: {total_matched_files}")
    
    for k, count in total_counts.items():
        print(f"'{colored(k, Colors.YELLOW)}': {colored(str(count), Colors.GREEN)} occurrences")
    
    # Detailed folder results
    print("\nDETAILED RESULTS")
    
    for folder, info in report.items():
        print(f"\nFolder: {folder}")
        print(f"Files in folder: {info['total_files']}")
        print(f"Files with matches: {len(info['files'])}")
        
        # Folder keyword counts
        for k in keywords:
            if info['counts'][k] > 0:
                print(f"'{colored(k, Colors.YELLOW)}': {colored(str(info['counts'][k]), Colors.GREEN)}")
        
        # File details
        for filename, counts in info['files']:
            matches = [f"'{colored(k, Colors.YELLOW)}'({colored(str(c), Colors.GREEN)})" 
                      for k, c in counts.items() if c > 0]
            print(f"- {filename} â†’ {', '.join(matches)}")
    
    # Error reporting
    if errors:
        print(f"\nERRORS ({len(errors)})", file=sys.stderr)
        for file_path, error in errors:
            print(f"{file_path}: {error}", file=sys.stderr)

if __name__ == "__main__":
    main()