import os
import logging
import ssl
from typing import Optional

# Get the directory where this script is located
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

SSL_CERT_PATH: str = os.path.join(BASE_DIR, "cryptomock-server.crt")
SSL_KEY_PATH: str = os.path.join(BASE_DIR, "cryptomock-server.key")





def create_self_signed_cert(cert_path, key_path):
    """Create self-signed SSL certificate for testing."""
    try:
        from cryptography import x509
        from cryptography.x509.oid import NameOID
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        import datetime
        import ipaddress

        # Generate private key
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )

        # Create certificate
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, "US"),
            x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, "California"),
            x509.NameAttribute(NameOID.LOCALITY_NAME, "San Francisco"),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, "ACME Organization"),
            x509.NameAttribute(NameOID.COMMON_NAME, "127.0.0.1"),
        ])

        now = datetime.datetime.now(datetime.UTC)

        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            now
        ).not_valid_after(
            now + datetime.timedelta(days=365)
        ).add_extension(
            x509.SubjectAlternativeName([
                x509.IPAddress(ipaddress.IPv4Address("127.0.0.1")),
                x509.DNSName("localhost"),
            ]),
            critical=False,
        ).sign(private_key, hashes.SHA256())

        # Write certificate and private key
        with open(cert_path, "wb") as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))

        with open(key_path, "wb") as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))

        logging.info("Self-signed certificate created successfully")

    except ImportError:
        logging.error("cryptography library not available. Please install it or create certificate manually.")
        # Create dummy files
        with open(cert_path, "w") as f:
            f.write("DUMMY CERTIFICATE")
        with open(key_path, "w") as f:
            f.write("DUMMY KEY")


def ensure_ssl_certificates(cert_path: Optional[str] = None, key_path: Optional[str] = None, create_cert_func=None) -> None:
    cert_path = cert_path or SSL_CERT_PATH
    key_path = key_path or SSL_KEY_PATH
    if create_cert_func is None:
        create_cert_func = create_self_signed_cert
    if not (os.path.exists(cert_path) and os.path.exists(key_path)):
        logging.warning("SSL certificate files not found. Creating self-signed certificates...")
        create_cert_func(cert_path, key_path)


def load_ssl_context() -> ssl.SSLContext:
    """Create and return an SSL context with the default certificate and key files, ensuring they exist."""
    ensure_ssl_certificates()
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    ssl_context.load_cert_chain(certfile=SSL_CERT_PATH, keyfile=SSL_KEY_PATH)
    return ssl_context