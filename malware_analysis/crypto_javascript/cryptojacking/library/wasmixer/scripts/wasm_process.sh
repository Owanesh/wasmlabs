#!/usr/bin/env bash
# Merged wasm processing automation: runs binex and wasm2wat on a list of wasm files
# Produces text/wat outputs and a combined report

set -euo pipefail

ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"
BINEX_PY="$ROOT_DIR/../../../../tools/binex/binex.py"

# allow overriding tools via env
WASM2WAT_CMD="${WASM2WAT_CMD:-wasm2wat}"
PY_CMD="${PY_CMD:-python3}"


# output layout: use the sibling `mixed` directory for inputs/outputs
mixed_DIR="$(cd "$ROOT_DIR/../mixed" 2>/dev/null && pwd || echo "$ROOT_DIR/../mixed")"
OUT_DIR="$mixed_DIR"
REPORT_FILE="$OUT_DIR/report.txt"

mkdir -p "$OUT_DIR" "$OUT_DIR/txt" "$OUT_DIR/wat" "$OUT_DIR/wasm"

echo "WASM processing report" > "$REPORT_FILE"
echo "Generated: $(date -u)" >> "$REPORT_FILE"
echo >> "$REPORT_FILE"

process_one() {
  local wasmfile="$1"
  local base
  base="$(basename "$wasmfile" .wasm)"
  local txt_out="$OUT_DIR/txt/${base}.txt"
  local wat_out="$OUT_DIR/wat/${base}.wat"

  echo "Processing: $wasmfile" | tee -a "$REPORT_FILE"

  if [ -x "$BINEX_PY" ] || [ -f "$BINEX_PY" ]; then
    echo "  Running binex -> $txt_out" | tee -a "$REPORT_FILE"
    "$PY_CMD" "$BINEX_PY" "$wasmfile" "$txt_out" 2>> "$OUT_DIR/errors.log" || echo "    binex failed for $wasmfile" | tee -a "$REPORT_FILE"
  else
    echo "  binex not found at $BINEX_PY; skipping" | tee -a "$REPORT_FILE"
  fi

  echo "  running wasm2wat -> $wat_out" | tee -a "$REPORT_FILE"
  "$WASM2WAT_CMD" "$wasmfile" -o "$wat_out" 2>> "$OUT_DIR/errors.log" || echo "    wasm2wat failed for $wasmfile" | tee -a "$REPORT_FILE"

  # small summary: sizes
  local size_wasm size_txt size_wat
  size_wasm=$(stat -f%z "$wasmfile" 2>/dev/null || stat -c%s "$wasmfile" 2>/dev/null || echo "?" )
  size_txt=$(stat -f%z "$txt_out" 2>/dev/null || stat -c%s "$txt_out" 2>/dev/null || echo "-")
  size_wat=$(stat -f%z "$wat_out" 2>/dev/null || stat -c%s "$wat_out" 2>/dev/null || echo "-")

  echo "  sizes (bytes): wasm=$size_wasm  txt=$size_txt  wat=$size_wat" | tee -a "$REPORT_FILE"
  echo >> "$REPORT_FILE"
}

main() {
  if [ "$#" -ge 1 ]; then
    files=("$@")
  else
    shopt -s nullglob
    files=( "$mixed_DIR/wasm"/*.wasm )
    if [ ${#files[@]} -eq 0 ]; then
      files=( ./*.wasm )
    fi
  fi

  # Sort files alphabetically
  IFS=$'\n' files=($(sort <<<"${files[*]}"))
  unset IFS

  if [ ${#files[@]} -eq 0 ]; then
    echo "No .wasm files found. Pass files as arguments or place .wasm files in the same folder." | tee -a "$REPORT_FILE"
    exit 1
  fi

  for f in "${files[@]}"; do
    [ -f "$f" ] || continue
    process_one "$f"
  done

  echo "Finished processing ${#files[@]} wasm file(s)." | tee -a "$REPORT_FILE"
  echo "Output directory: $OUT_DIR" | tee -a "$REPORT_FILE"

  # Synthetic WAT/WASM size report
  echo >> "$REPORT_FILE"
  echo "WAT vs WASM size summary:" | tee -a "$REPORT_FILE"
  for wasm in "$OUT_DIR/wasm/"*.wasm; do
    wat="$OUT_DIR/wat/$(basename "${wasm%.wasm}.wat")"
    if [ -f "$wat" ]; then
      size_wasm=$(stat -f%z "$wasm" 2>/dev/null || stat -c%s "$wasm" 2>/dev/null || echo "?" )
      size_wat=$(stat -f%z "$wat" 2>/dev/null || stat -c%s "$wat" 2>/dev/null || echo "?" )
      ratio=$(awk "BEGIN {if ($size_wasm>0) printf \"%.2f\", $size_wat/$size_wasm; else print \"-\"}")
      echo "  $(basename "$wasm"): wasm=$size_wasm B, wat=$size_wat B, wat/wasm=$ratio" | tee -a "$REPORT_FILE"
    fi
  done
}

main "$@"

main "$@"
