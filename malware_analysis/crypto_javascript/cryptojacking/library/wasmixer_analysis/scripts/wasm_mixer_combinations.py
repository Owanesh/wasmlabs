#!/usr/bin/env python3
import os
import shutil
import subprocess
import sys
import time
from itertools import combinations, permutations

def main():
    # Configuration
    base_wasm = "placeholder/base.wasm"
    wasmixer_cli_path = "../../../../../../../tools/WASMixer/cli" 
    
    # Output directory for composed files
    composed_dir = "../composed/wasm"
    os.makedirs(composed_dir, exist_ok=True)
    
    # Available flags (excluding --safe, --list, --all)
    flags = [ "--flatten", "--cf", "--memory"]
    
    # Check if base.wasm exists
    if not os.path.exists(base_wasm):
        print(f"Error: {base_wasm} not found in current directory")
        sys.exit(1)
    
    # Check if WASMixer CLI path exists
    if not os.path.exists(wasmixer_cli_path):
        print(f"Error: WASMixer CLI path {wasmixer_cli_path} not found")
        print("Please adjust the wasmixer_cli_path variable in the script")
        sys.exit(1)
    
    print(f"Starting WASMixer automation for {base_wasm}")
    print(f"Available flags: {', '.join(flags)}")
    print(f"WASMixer CLI path: {wasmixer_cli_path}")
    print("-" * 50)
    
    # Generate all combinations AND permutations (1 to len(flags))
    all_combinations = []
    
    # Single flags (no permutations needed)
    for flag in flags:
        all_combinations.append([flag])
    
    # Pairs - all permutations of each combination
    for pair in combinations(flags, 2):
        for perm in permutations(pair):
            all_combinations.append(list(perm))
    
    # Triplets - all permutations of each combination
    for triplet in combinations(flags, 3):
        for perm in permutations(triplet):
            all_combinations.append(list(perm))
    
    # All four flags - all permutations
    for perm in permutations(flags):
        all_combinations.append(list(perm))
    
    
    total_combinations = len(all_combinations)
    print(f"Total combinations to process: {total_combinations}")
    print("-" * 50)
    
    successful_runs = 0
    failed_runs = 0
    report_data = []
    
    # Add original file data to report
    original_filesize = os.path.getsize(base_wasm)
    report_data.append({
        'name': base_wasm,
        'flags': [],
        'original_filesize': original_filesize,
        'obfuscated_filesize': original_filesize,
        'obfuscation_time': 0.0
    })
    
    for i, flag_combo in enumerate(all_combinations, 1):
        # Create output filename
        if flag_combo == ["--all"]:
            flag_suffix = "all"
        else:
            # Convert flags to clean names (remove -- prefix)
            clean_flags = [flag[2:] for flag in flag_combo]
            flag_suffix = "_".join(clean_flags)
        
        output_file = f"base_{flag_suffix}.wasm"
        output_path = os.path.join(composed_dir, output_file)
        
        print(f"[{i}/{total_combinations}] Processing: {' '.join(flag_combo)}")
        print(f"Output file: {output_path}")
        
        try:
            shutil.copy2(base_wasm, output_path)
            print(f"  ✓ Copied {base_wasm} to {output_path}")
            
            cmd = [
                sys.executable, "main.py", 
                os.path.abspath(output_path)
            ] + flag_combo
            
            print(f"  Running: {' '.join(cmd[1:])}")
            
            start_time = time.time()
            result = subprocess.run(
                cmd,
                cwd=wasmixer_cli_path,
                capture_output=True,
                text=True,
                timeout=300
            )
            elapsed = time.time() - start_time
            if result.returncode == 0:
                print(f"  ✓ Successfully processed with flags: {' '.join(flag_combo)}")
                successful_runs += 1
                obfuscated_filesize = os.path.getsize(output_path)
                report_data.append({
                    'name': output_path,
                    'flags': flag_combo,
                    'original_filesize': original_filesize,
                    'obfuscated_filesize': obfuscated_filesize,
                    'obfuscation_time': elapsed
                })
            else:
                print(f"  ✗ Failed with return code {result.returncode}")
                if result.stderr.strip():
                    print(f"  Error: {result.stderr.strip()}")
                if result.stdout.strip():
                    print(f"  Output: {result.stdout.strip()}")
                failed_runs += 1
                if os.path.exists(output_path):
                    os.remove(output_path)
                    print(f"  Removed failed output file: {output_path}")
        except subprocess.TimeoutExpired:
            print(f"  ✗ Timeout after 5 minutes")
            failed_runs += 1
            if os.path.exists(output_path):
                os.remove(output_path)
                print(f"  Removed timeout output file: {output_path}")
        except Exception as e:
            print(f"  ✗ Error: {str(e)}")
            failed_runs += 1
            if os.path.exists(output_path):
                os.remove(output_path)
                print(f"  Removed error output file: {output_path}")
        print()
    
    # Generate report filename
    report_file = "wasmixer_report.txt"
    
    # Write detailed report
    with open(report_file, 'w') as f:
        f.write("WASMixer Automation Report\n")
        f.write("=" * 50 + "\n")
        f.write(f"Total combinations processed: {total_combinations}\n")
        f.write(f"Successful: {successful_runs}\n")
        f.write(f"Failed: {failed_runs}\n")
        f.write("\nFile Details:\n")
        f.write("-" * 30 + "\n")
        
        for row in report_data:
            if row['name'] == base_wasm:
                f.write(f"{row['name']}: {row['original_filesize']:,} bytes (original)\n")
            elif os.path.exists(row['name']):
                size_change = (row['obfuscated_filesize'] / row['original_filesize']) - 1
                size_change_str = f"{size_change:+.1%}" if size_change != 0 else "±0.0%"
                flags_str = ' '.join(row['flags']) if row['flags'] else "none"
                f.write(f"{row['name']}: {row['obfuscated_filesize']:,} bytes ({size_change_str}) - flags: {flags_str}\n")
    
    # Summary
    print("=" * 50)
    print("AUTOMATION COMPLETE")
    print("=" * 50)
    print(f"Total combinations processed: {total_combinations}")
    print(f"Successful: {successful_runs}")
    print(f"Failed: {failed_runs}")
    
    if successful_runs > 0:
        print(f"\nSuccessfully generated files:")
        for row in report_data[1:]:
            if os.path.exists(row['name']):
                size_change = (row['obfuscated_filesize'] / row['original_filesize']) - 1
                size_change_str = f"{size_change:+.1%}" if size_change != 0 else "±0.0%"
                print(f"  - {row['name']} ({row['obfuscated_filesize']:,} bytes, {size_change_str}, {row['obfuscation_time']:.2f}s)")
    
    print(f"\nOriginal file: {base_wasm} (unchanged)")
    print(f"Detailed report: {report_file}")

if __name__ == "__main__":
    main()