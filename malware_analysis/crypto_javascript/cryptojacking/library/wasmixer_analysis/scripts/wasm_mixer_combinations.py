#!/usr/bin/env python3
import os
import shutil
import subprocess
import sys
import time
from itertools import combinations, permutations
import argparse
from typing import List, Dict, Any


def main() -> None:
    """
    Automates the process of running WASMixer CLI on a given input WASM file with all possible
    combinations or permutations of specified flags. Generates obfuscated WASM files and a report.

    Command-line arguments:
        --input    : Path to the input WASM file (required)
        --cli      : Path to the WASMixer CLI directory (required)
        --args     : Comma-separated list of flags (without '--', required)
        --paranoid : If set, generates all permutations (order matters)
        --outdir   : Output directory for obfuscated files (default: ../composed/wasm)

    The script copies the input WASM file for each flag combination/permutation, runs WASMixer CLI,
    and collects statistics for a summary report.
    """
    parser = argparse.ArgumentParser(description="WASMixer automation script")
    parser.add_argument("--input", required=True, help="Input wasm file")
    parser.add_argument("--cli", required=True, help="Path to WASMixer CLI")
    parser.add_argument(
        "--args", required=True, help="Comma-separated list of flags (without --)"
    )
    parser.add_argument(
        "--paranoid",
        action="store_true",
        help="Generate all permutations (order matters)",
    )
    parser.add_argument(
        "--outdir",
        default="../composed/wasm",
        help="Output directory for composed files (default: ../composed/wasm)",
    )
    args = parser.parse_args()

    base_wasm: str = args.input
    wasmixer_cli_path: str = args.cli
    flags: List[str] = [
        f"--{flag.strip()}" for flag in args.args.split(",") if flag.strip()
    ]
    composed_dir: str = args.outdir
    os.makedirs(composed_dir, exist_ok=True)

    # Check if base.wasm exists
    if not os.path.exists(base_wasm):
        print(f"Error: {base_wasm} not found in current directory")
        sys.exit(1)

    # Check if WASMixer CLI path exists
    if not os.path.exists(wasmixer_cli_path):
        print(f"Error: WASMixer CLI path {wasmixer_cli_path} not found")
        print("Please adjust the wasmixer_cli_path variable in the script")
        sys.exit(1)

    print(f"Starting WASMixer automation for {base_wasm}")
    print(f"Available flags: {', '.join(flags)}")
    print(f"WASMixer CLI path: {wasmixer_cli_path}")
    print(f"Paranoid mode: {'ON' if args.paranoid else 'OFF'}")
    print("-" * 50)

    def is_valid_combo(combo: List[str]) -> bool:
        """
        Returns True if the combo respects the constraints:
        - 'cf' only if 'code' is present (with any others)
        - 'ca' only if 'alias' is present (with any others)
        - 'collatz' only if 'code' or 'alias' is present (with any others)
        """
        flags = [flag.lstrip("-") for flag in combo]
        if "cf" in flags and "flatten" not in flags:
            return False
        if "ca" in flags and "alias" not in flags:
            return False
        if "collatz" in flags and not ("flatten" in flags or "alias" in flags):
            return False
        return True

    # Generate combinations or permutations based on paranoid mode
    all_combinations: List[List[str]] = []
    n_flags: int = len(flags)
    if args.paranoid:
        for r in range(1, n_flags + 1):
            for perm in permutations(flags, r):
                if is_valid_combo(list(perm)):
                    all_combinations.append(list(perm))
    else:
        for r in range(1, n_flags + 1):
            for combo in combinations(flags, r):
                if is_valid_combo(list(combo)):
                    all_combinations.append(list(combo))

    total_combinations: int = len(all_combinations)
    print(f"Total combinations to process: {total_combinations}")
    print("-" * 50)

    successful_runs: int = 0
    failed_runs: int = 0
    report_data: List[Dict[str, Any]] = []

    # Add original file data to report
    original_filesize: int = os.path.getsize(base_wasm)
    report_data.append(
        {
            "name": base_wasm,
            "flags": [],
            "original_filesize": original_filesize,
            "obfuscated_filesize": original_filesize,
            "obfuscation_time": 0.0,
        }
    )

    for i, flag_combo in enumerate(all_combinations, 1):
        # Create output filename
        if flag_combo == ["--all"]:
            flag_suffix = "all"
        else:
            # Convert flags to clean names (remove -- prefix)
            clean_flags = [flag[2:] for flag in flag_combo]
            flag_suffix = "_".join(clean_flags)

        output_file: str = f"base_{flag_suffix}.wasm"
        output_path: str = os.path.join(composed_dir, output_file)

        print(f"[{i}/{total_combinations}] Processing: {' '.join(flag_combo)}")
        print(f"Output file: {output_path}")

        try:
            shutil.copy2(base_wasm, output_path)
            print(f"  ✓ Copied {base_wasm} to {output_path}")

            cmd: List[str] = [
                sys.executable,
                "main.py",
                os.path.abspath(output_path),
            ] + flag_combo

            print(f"  Running: {' '.join(cmd[1:])}")

            start_time: float = time.time()
            result = subprocess.run(
                cmd, cwd=wasmixer_cli_path, capture_output=True, text=True, timeout=300
            )
            elapsed: float = time.time() - start_time
            if result.returncode == 0:
                print(f"  ✓ Successfully processed with flags: {' '.join(flag_combo)}")
                successful_runs += 1
                obfuscated_filesize: int = os.path.getsize(output_path)
                report_data.append(
                    {
                        "name": output_path,
                        "flags": flag_combo,
                        "original_filesize": original_filesize,
                        "obfuscated_filesize": obfuscated_filesize,
                        "obfuscation_time": elapsed,
                    }
                )
            else:
                print(f"  ✗ Failed with return code {result.returncode}")
                if result.stderr.strip():
                    print(f"  Error: {result.stderr.strip()}")
                if result.stdout.strip():
                    print(f"  Output: {result.stdout.strip()}")
                failed_runs += 1
                if os.path.exists(output_path):
                    os.remove(output_path)
                    print(f"  Removed failed output file: {output_path}")
        except subprocess.TimeoutExpired:
            print(f"  ✗ Timeout after 5 minutes")
            failed_runs += 1
            if os.path.exists(output_path):
                os.remove(output_path)
                print(f"  Removed timeout output file: {output_path}")
        except Exception as e:
            print(f"  ✗ Error: {str(e)}")
            failed_runs += 1
            if os.path.exists(output_path):
                os.remove(output_path)
                print(f"  Removed error output file: {output_path}")
        print()

    # Generate report filename
    report_file: str = "wasmixer_report.txt"

    # Write detailed report
    with open(report_file, "w") as f:
        f.write("WASMixer Automation Report\n")
        f.write("=" * 50 + "\n")
        f.write(f"Total combinations processed: {total_combinations}\n")
        f.write(f"Successful: {successful_runs}\n")
        f.write(f"Failed: {failed_runs}\n")
        f.write("\nFile Details:\n")
        f.write("-" * 30 + "\n")

        for row in report_data:
            if row["name"] == base_wasm:
                f.write(
                    f"{row['name']}: {row['original_filesize']:,} bytes (original)\n"
                )
            elif os.path.exists(row["name"]):
                size_change = (
                    row["obfuscated_filesize"] / row["original_filesize"]
                ) - 1
                size_change_str = f"{size_change:+.1%}" if size_change != 0 else "±0.0%"
                flags_str = " ".join(row["flags"]) if row["flags"] else "none"
                f.write(
                    f"{row['name']}: {row['obfuscated_filesize']:,} bytes ({size_change_str}) - flags: {flags_str}\n"
                )

    # Summary
    print("=" * 50)
    print("AUTOMATION COMPLETE")
    print("=" * 50)
    print(f"Total combinations processed: {total_combinations}")
    print(f"Successful: {successful_runs}")
    print(f"Failed: {failed_runs}")

    if successful_runs > 0:
        print(f"\nSuccessfully generated files:")
        for row in report_data[1:]:
            if os.path.exists(row["name"]):
                size_change = (
                    row["obfuscated_filesize"] / row["original_filesize"]
                ) - 1
                size_change_str = f"{size_change:+.1%}" if size_change != 0 else "±0.0%"
                print(
                    f"  - {row['name']} ({row['obfuscated_filesize']:,} bytes, {size_change_str}, {row['obfuscation_time']:.2f}s)"
                )

    print(f"\nOriginal file: {base_wasm} (unchanged)")
    print(f"Detailed report: {report_file}")


if __name__ == "__main__":
    main()
