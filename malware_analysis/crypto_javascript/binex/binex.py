
#!/usr/bin/env python3
"""
Reads a text file containing numbers separated by commas, spaces, or newlines (decimal or hexadecimal 0x..)
and writes the corresponding bytes to a binary file.

Usage:
  python3 binex.py <input.txt> <out.bin>
"""
import sys
import re
import os
from typing import List

def extract_numeric_tokens(text: str) -> List[int]:
    """
    Extracts numeric tokens (decimal or hexadecimal) from the input text and returns them as a list of integers.
    Values outside the byte range (0-255) are masked to fit.
    """
    tokens = re.findall(r"0x[0-9a-fA-F]+|\d+", text)
    if not tokens:
        return []
    vals: List[int] = []
    for t in tokens:
        if t.startswith(('0x', '0X')):
            v = int(t, 16)
        else:
            v = int(t, 10)
        if v < 0 or v > 255:
            print(f'Warning: value out of byte range (0-255): {v}')
            v = v & 0xFF
        vals.append(v)
    return vals

def main() -> None:
    """
    Main entry point for the script. If the input is a text file, produce a binary file. If the input is a binary (.wasm) file, produce a text file with byte values.
    """
    if len(sys.argv) < 3:
        print("Usage: binex.py <input.txt|input.wasm> <out.bin|out.txt> [--hex|--dec]")
        print("\nFlags:")
        print("  --hex   Output hexadecimal values (only for .wasm/.bin input)")
        print("  --dec   Output decimal values (default, only for .wasm/.bin input)")
        print("\nNotes:")
        print("  Flags --hex and --dec are ignored if input file is .txt (text to binary conversion)")
        print("  For .wasm/.bin input, output is .txt with either decimal or hexadecimal values.")
        sys.exit(2)

    infile: str = sys.argv[1]
    outfile: str = sys.argv[2]
    # Flags only valid for .wasm/.bin input
    hex_flag = '--hex' in sys.argv[3:]
    dec_flag = '--dec' in sys.argv[3:] or not hex_flag

    # If input is .wasm or .bin, produce .txt
    if infile.endswith('.wasm') or infile.endswith('.bin'):
        with open(infile, 'rb') as f:
            data: bytes = f.read()
        lines = []
        if hex_flag:
            # Output hex only
            for b in data:
                lines.append(f"0x{b:02x}")
        else:
            # Default: output decimal only
            for b in data:
                lines.append(f"{b}")
        os.makedirs(os.path.dirname(outfile) or '.', exist_ok=True)
        with open(outfile, 'w', encoding='utf-8') as f:
            f.write(','.join(lines))
        print(f'Wrote {len(data)} bytes as text to {outfile}')
        return
    
    print("Any [--hex/--dec] is ignored, .txt input file detected ")
    # Otherwise, treat as text to binary
    with open(infile, 'r', encoding='utf-8', errors='ignore') as f:
        text: str = f.read()

    vals: List[int] = extract_numeric_tokens(text)
    if not vals:
        print(f'No numeric tokens found in {infile}')
        sys.exit(1)

    b: bytes = bytes(vals)
    os.makedirs(os.path.dirname(outfile) or '.', exist_ok=True)
    with open(outfile, 'wb') as f:
        f.write(b)
    print(f'Wrote {len(b)} bytes to {outfile}')
    if b[:4] == b'\x00asm':
        print('Looks like a wasm file (magic ok)')
    else:
        print('File written; first 8 bytes:', b[:8])

if __name__ == "__main__":
    main()
