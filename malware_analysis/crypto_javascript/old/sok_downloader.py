"""
Script to download JavaScript malware samples from bazaar.abuse.ch
==================================================================

- Reads SHA256 hashes from VT_miners.csv (from SoK dataset)
- For each hash, queries MalwareBazaar for file info
- If the file is a JavaScript file (.js), downloads and saves it

Requirements:
-------------
- requests
- python-dotenv
- .env file with AUTH_KEY variable set

References:
-----------
- https://github.com/sokcryptojacking/SoK/blob/main/VT%20Dataset/VT_miners.csv
- https://bazaar.abuse.ch/api/

"""

import requests
import os
import csv
from dotenv import load_dotenv
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import List

def isValidJsFile(hash: str, url: str, headers: dict) -> bool:
    """
    Checks if the given hash corresponds to a JavaScript file in MalwareBazaar.

    Args:
        hash (str): SHA256 hash of the file to check.
        url (str): API endpoint.
        headers (dict): HTTP headers.

    Returns:
        bool: True if the file is a JavaScript file, False otherwise.
    """
    try:
        response = requests.post(url, data={"query": "get_info", "hash": hash}, headers=headers, timeout=15)
        status = response.json().get("query_status", "")
        if status in {"http_post_expected", "hash_not_found", "illegal_hash", "no_hash_provided"}:
            #print(f"API Error {hash}: {status}")
            return False
        return response.json().get("file_type") == "js"
    except Exception as e:
        print(f"Error checking hash {hash}: {e}")
        return False

def download_file(hash: str, url: str, headers: dict) -> bool:
    """
    Downloads the file corresponding to the given hash from MalwareBazaar.

    Args:
        hash (str): SHA256 hash of the file to download.
        url (str): API endpoint.
        headers (dict): HTTP headers.

    Returns:
        bool: True if the file was downloaded successfully, False otherwise.
    """
    try:
        response = requests.post(url, data={"query": "get_file", "hash": hash}, headers=headers, timeout=30)
        status = response.json().get("query_status", "")
        if status in {"http_post_expected", "illegal_sha256_hash", "no_sha256_hash", "file_not_found"}:
            #print(f"API Error {hash}: {status}")
            return False
       
        with open(f"{hash}.js", "wb") as f:
            f.write(response.content)
        return True
    except Exception as e:
        print(f"Error downloading {hash}: {e}")
        return False

def process_hash(hash: str, url: str, headers: dict) -> bool:
    """
    Checks and downloads a JS file for a given hash.

    Args:
        hash (str): SHA256 hash.
        url (str): API endpoint.
        headers (dict): HTTP headers.

    Returns:
        bool: True if file downloaded, False otherwise.
    """
    if isValidJsFile(hash, url, headers):
        return download_file(hash, url, headers)
    return False

if __name__ == "__main__":
    # Load API key from .env file
    load_dotenv()
    api_key = os.getenv("AUTH_KEY")
    url = "https://mb-api.abuse.ch/api/v1/"
    headers = {"Auth-Key": api_key}

    print("Reading hashes from VT_miners.csv")
    print("Downloading files from bazaar.abuse.ch")
    print("============================================")

    # Read all hashes from CSV
    hashes: List[str] = []
    with open("VT_miners.csv", "r") as file:
        reader = csv.reader(file)
        next(reader)  # Skip header row
        for row in reader:
            hashes.append(row[1])

    total = len(hashes)
    downloaded = 0
    processed = 0

    # Use ThreadPoolExecutor for parallel requests
    max_workers = min(16, os.cpu_count() * 2 if os.cpu_count() else 8)
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(process_hash, h, url, headers): h for h in hashes}
        for i, future in enumerate(as_completed(futures), 1):
            result = future.result()
            processed += 1
            if result:
                downloaded += 1
            if processed % 100 == 0 or processed == total:
                print(f"Progress: {processed} scanned over {total}, {downloaded} downloaded", flush=True)

    print(f"\nDone. {total} hashes scanned, {downloaded} files downloaded.")